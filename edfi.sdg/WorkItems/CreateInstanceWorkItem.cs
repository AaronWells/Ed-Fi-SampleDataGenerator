using System;
using System.Configuration;
using System.Xml.Serialization;
using EdFi.SampleDataGenerator.Configurations;
using EdFi.SampleDataGenerator.Models;
using EdFi.SampleDataGenerator.Quantity;
using EdFi.SampleDataGenerator.Utility;

namespace EdFi.SampleDataGenerator.WorkItems
{
    /// <summary>
    /// Create a number of objects of type T and put them on the work queue
    /// </summary>
    [Serializable]
    public class CreateInstanceWorkItem : WorkItem 
    {
        /// <summary>
        /// Number of objects to create
        /// </summary>
        public QuantityBase QuantitySpecifier { get; set; }

        private Type _assignedType = typeof(ComplexObjectType);
        
        /// <summary>
        /// The full name of the type to be generated by the work item
        /// </summary>
        [XmlAttribute]
        public string CreatedType {
            get { return _assignedType.FullName; }
            set
            {
                var type = Type.GetType(value);
                
                if (type == null) // try to get it from other available assemblies
                {
                    var assemblies = AppDomain.CurrentDomain.GetAssemblies();
                    foreach (var assembly in assemblies)
                    {
                        type = assembly.GetType(value);
                        if (type != null) break;
                    }
                }

                if(type==null)
                    throw new ConfigurationErrorsException(string.Format("Cannot find CreatedType: '{0}'", value));

                _assignedType = type;

                // todo: check if the type has the default constructor
//                var constructor = type.GetConstructor(Type.EmptyTypes);
            }
        }

        /// <summary>
        /// Create a number of objects and place them on the queue, 
        /// or if there are too many, split the task in two and put those tasks back on the queue.
        /// Initialize the Id property.
        /// </summary>
        /// <param name="input">ignored</param>
        /// <param name="configuration">uses MaxQueueWrites property</param>
        /// <returns>an array of work items</returns>
        protected override object[] DoWorkImplementation(object input, IConfiguration configuration)
        {
            object[] results;
            var qty = QuantitySpecifier.Next();
            if (qty > configuration.MaxQueueWrites)
            {
                results = new object[]
                {
                    new CreateInstanceWorkItem {Id = Id, CreatedType = CreatedType, QuantitySpecifier = new ConstantQuantity {Quantity = qty/2}},
                    new CreateInstanceWorkItem {Id = Id, CreatedType = CreatedType, QuantitySpecifier = new ConstantQuantity {Quantity = qty/2 + qty%2}}
                };
            }
            else
            {
                results = new object[qty];
                for (var i = 0; i < qty; i++)
                {
                    results[i] = Activator.CreateInstance(_assignedType);

                    var complexObjectType = results[i] as IComplexObjectType;
                    if(complexObjectType != null)
                        ((IComplexObjectType) results[i]).id = IdentifierGenerator.Create();
                }
            }
            return results;
        }
    }
}
