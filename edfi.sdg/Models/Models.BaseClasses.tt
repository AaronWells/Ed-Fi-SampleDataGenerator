<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace EdFi.SampleDataGenerator.Models {
//
//	Association classes need to have an additional property of "id"
//
<#
    var regex1 = new Regex(@"public partial class (.*Association) : object");
    using (var reader = new StreamReader(Host.ResolvePath("Models.cs") ))
    {
        string line;
        while ((line = reader.ReadLine()) != null)
        {
            Match m = regex1.Match(line);
            if (m.Success)
            {
                var foo = m.Groups[1].Value;
#>
public partial class <#=foo#> : IComplexObjectType { 
	public string id { get; set; } 
}
<#
            }
        }
    }
#>
//
//	Interchange Types
//
public interface IInterchange<T> { T[] Items { get; set; } }
<#
    var regex2 = new Regex(@"public partial class (Interchange.*) : object");
    var regex3 = new Regex(@"public (.*)\[\] Items {");
    using (var reader = new StreamReader(Host.ResolvePath("Models.cs") ))
    {
        string line;
        string name = String.Empty;
        string type = String.Empty;
        while ((line = reader.ReadLine()) != null)
        {
            Match m = regex2.Match(line);
            if (m.Success)
            {
                name = m.Groups[1].Value;
				type = String.Empty;
            }
            Match mProp = regex3.Match(line);
            if (mProp.Success && !string.IsNullOrEmpty(name))
            {
                type = mProp.Groups[1].Value;
            }
            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(type))
            {
#>
public partial class <#=name#> : IInterchange<<#=type#>> {}
<#
				name = type = String.Empty;
            }
        }
    }
#>
}